demoExcelFile <- system.file("demoFiles/multiregion.xlsx",
package = "XLConnect")
# create a copy of the template
template <- "template-ws.xlsx"
file.copy(demoExcelFile, template)
# Write single data.frame to a specified location in an existing file
writeWorksheetToFile(template, data=iris, sheet="FirstSheet",
startRow=9, startCol = 9)
install.packages("XLConnect")
library("XLConnect")
demoExcelFile <- system.file("demoFiles/multiregion.xlsx",
package = "XLConnect")
# create a copy of the template
template <- "template-ws.xlsx"
file.copy(demoExcelFile, template)
# Write single data.frame to a specified location in an existing file
writeWorksheetToFile(template, data=iris, sheet="FirstSheet",
startRow=9, startCol = 9)
View(iris)
getwd()
file <- paste(tempfile(), "xlsx", sep=".")
write.xlsx(USArrests, file=file)
detach("package:XLConnect", unload = TRUE)
detach("package:XLConnectJars", unload = TRUE)
library(xlsx)
addDataFrame(
x,
"sheet",
col.names = TRUE,
row.names = TRUE,
startRow = 1,
startColumn = 1,
colStyle = NULL,
colnamesStyle = NULL,
rownamesStyle = NULL,
showNA = FALSE,
characterNA = "",
byrow = FALSE
)
df = data.frame(
" ",
" ",
"ABLE",
"Baker"
)
addDataFrame(
df,
"sheet",
col.names = TRUE,
row.names = TRUE,
startRow = 1,
startColumn = 1,
colStyle = NULL,
colnamesStyle = NULL,
rownamesStyle = NULL,
showNA = FALSE,
characterNA = "",
byrow = FALSE
)
addDataFrame(
df,
"sheet",
col.names = TRUE,
row.names = TRUE,
startRow = 1,
startColumn = 1
)
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
df = data.frame(
" "=queueWaitTime,
" "=queueWaitTime,
"ABLE"=queueWaitTime,
"Baker"=queueWaitTime
)
addDataFrame(
df,
"sheet",
col.names = TRUE,
row.names = TRUE,
startRow = 1,
startColumn = 1
)
#creating an Excel workbook. Both .xls and .xlsx file formats can be used.
wb <- loadWorkbook("XLConnectExample1.xlsx", create = TRUE)
#creating sheets within an Excel workbook
createSheet(wb, name = "chickSheet")
#writing into sheets within an Excel workbook :
#writing ChickWeight data frame into chickSheet
writeWorksheet(wb, ChickWeight, sheet = "chickSheet", startRow = 3, startCol = 4)
#saving a workbook to an Excel file :
#saves a workbook to the corresponding Excel file and writes the file to disk.
saveWorkbook(wb)
detach("package:xlsx", unload = TRUE)
library("XLConnect")
wb <- loadWorkbook("XLConnectExample1.xlsx", create = TRUE)
#creating sheets within an Excel workbook
createSheet(wb, name = "chickSheet")
#writing into sheets within an Excel workbook :
#writing ChickWeight data frame into chickSheet
writeWorksheet(wb, ChickWeight, sheet = "chickSheet", startRow = 3, startCol = 4)
#saving a workbook to an Excel file :
#saves a workbook to the corresponding Excel file and writes the file to disk.
saveWorkbook(wb)
#creating an Excel workbook. Both .xls and .xlsx file formats can be used.
wb <- loadWorkbook("XLConnectExample1.xlsx", create = TRUE)
#creating sheets within an Excel workbook
createSheet(wb, name = "chickSheet")
#writing into sheets within an Excel workbook :
#writing ChickWeight data frame into chickSheet
writeWorksheet(wb, ChickWeight, sheet = "chickSheet", startRow =605, startCol = 4)
#saving a workbook to an Excel file :
#saves a workbook to the corresponding Excel file and writes the file to disk.
saveWorkbook(wb)
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
detach("package:XLConnect", unload = TRUE)
detach("package:XLConnectJars", unload = TRUE)
library(xlsx)
library(xlsxjars)
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
library("xlsx")
detach("package:XLConnect", unload = TRUE)
detach("package:XLConnectJars", unload = TRUE)
detach("package:xlsx", unload = TRUE)
library("xlsx")
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
result
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
source('/media/tayyab/Data/programmes/R/AbleAndBakerCarHopProblem/main.R')
result
interArrivalTimes <- c(0)
arrivalTimes <- c(0)
# randomNumbersForServiceTimes
# randomNumbersForServiceTimes <- c()
# Able
ableTimeServiceBegin <- c(0)
ableServiceTime <- c()
ableTimeServiceEnds <- c()
# baker
bakerTimeServiceBegin <- c(0)
bakerServiceTime <- c(0)
bakerTimeServiceEnds <- c(0)
queueWaitTime <- c(0)
# AbleAndBakerServiceEnd
# 0 means free. any other number represents the minute at which the corresponding server will be free
ableFreeAt <- 0
bakerFreeAt <- 0
simulationTime <- 60
# Input for simulation time
repeat {
simulationTime <-
readline("Enter the time in minutes for simulation : ")
if (!is.na(as.integer(simulationTime))) {
simulationTime <- as.integer(simulationTime)
break
}
}
56
interArrivalTimes <- c(0)
arrivalTimes <- c(0)
# randomNumbersForServiceTimes
# randomNumbersForServiceTimes <- c()
# Able
ableTimeServiceBegin <- c(0)
ableServiceTime <- c()
ableTimeServiceEnds <- c()
# baker
bakerTimeServiceBegin <- c(0)
bakerServiceTime <- c(0)
bakerTimeServiceEnds <- c(0)
queueWaitTime <- c(0)
# AbleAndBakerServiceEnd
# 0 means free. any other number represents the minute at which the corresponding server will be free
ableFreeAt <- 0
bakerFreeAt <- 0
simulationTime <- 60
# Input for simulation time
repeat {
simulationTime <-
readline("Enter the time in minutes for simulation : ")
if (!is.na(as.integer(simulationTime))) {
simulationTime <- as.integer(simulationTime)
break
}
}
write.xlsx(result, paste(getwd(),"output.xlsx",sep = "/"), sheetName = "result",append = TRUE)
write.xlsx(result, paste(getwd(),"output.xlsx",sep = "\"), sheetName = "result",append = TRUE)
write.xlsx(result, paste(getwd(),"output.xlsx",sep = "/"), sheetName = "result",append = TRUE)
source('E:/5 Semester/Simulation & Modeling/Assigment/R Programming/assignment/AbleAndBakerCarHopProblem/main.R')
